import java.io.;
import java.math.;
import java.security.;
import java.text.;
import java.util.;
import java.util.concurrent.;
import java.util.function.;
import java.util.regex.;
import java.util.stream.;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;



class Result {

    
      Complete the 'pairs' function below.
     
      The function is expected to return an INTEGER.
      The function accepts following parameters
       1. INTEGER k
       2. INTEGER_ARRAY arr
     

    public static int pairs(int k, ListInteger arr) {
     SetInteger numSet = new HashSet(arr); 
        int count = 0;

        for (int num  arr) {
            if (numSet.contains(num + k)) {
                count++;
            }
        }

        return count;
    }

    }



public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(OUTPUT_PATH)));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll(s+$, ).split( );

        int n = Integer.parseInt(firstMultipleInput[0]);

        int k = Integer.parseInt(firstMultipleInput[1]);

        ListInteger arr = Stream.of(bufferedReader.readLine().replaceAll(s+$, ).split( ))
            .map(IntegerparseInt)
            .collect(toList());

        int result = Result.pairs(k, arr);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
